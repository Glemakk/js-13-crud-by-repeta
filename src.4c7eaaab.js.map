{"version":3,"sources":["js/async-await.js","js/axios.js","index.js"],"names":["getFruit","name","fruits","strawberry","kiwi","apple","Promise","resolve","reject","setTimeout","aMakeSmoothie","console","time","berry","all","log","timeEnd","error","BASE_URL","addBook","book","options","method","headers","body","JSON","stringify","newBook","fetch","response","json","then","data","sum","a","b","i"],"mappings":";;;AAKA,SAASA,EAASC,GACVC,MAAAA,EAAS,CACbC,WAAY,KACZC,KAAM,MACNC,MAAO,MAGF,OAAA,IAAIC,QAAQ,CAACC,EAASC,IAAWC,WAAW,IAAMF,EAAQL,EAAOD,IAAQ,MAIlF,eAAeS,IACT,IACFC,QAAQC,KAAK,iBACPP,MAAAA,EAAQL,EAAS,SACjBI,EAAOJ,EAAS,QAChBa,EAAQb,EAAS,cAEjBE,QAAeI,QAAQQ,IAAI,CAACT,EAAOD,EAAMS,IAIxCX,OAHPS,QAAQI,IAAIb,GACZS,QAAQK,QAAQ,iBAETd,EACP,MAAOe,GACPN,QAAQI,IAAI,WAsBhBL,IAgBA,MAAMQ,EAAW,wBAEjB,eAAeC,EAAQC,GACfC,MAAAA,EAAU,CACdC,OAAQ,OACRC,QAAS,CACS,eAAA,oBAElBC,KAAMC,KAAKC,UAAUN,IAQhBO,aADeC,SAASV,UAAkBG,GAASM,QAAQE,SAASC;;AC7E7EF,MAAM,2CACHG,KAAKF,GAAYA,EAASC,QAC1BC,KAAKC,GAAQrB,QAAQI,IAAIiB;;ACmB5B,aAtBA,SAASC,EAAIC,EAAGC,GACPD,OAAAA,EAAIC,EALb,QAAA,oBACA,QAAA,oBACA,QAAA,cAMAxB,QAAQI,IAAIkB,EAAI,KAAM,MAEtB,IAAK,IAAIG,EAAI,EAAGA,EAAI,GAAIA,IACtBzB,QAAQI,IAAIqB","file":"src.4c7eaaab.js","sourceRoot":"..\\src","sourcesContent":["// Синтаксис async/await\r\n// Последовательные операции\r\n// Паралельные операции с Promise.all()\r\n// try...catch\r\n\r\nfunction getFruit(name) {\r\n  const fruits = {\r\n    strawberry: '🍓',\r\n    kiwi: '🥝 ',\r\n    apple: '🍎',\r\n  };\r\n\r\n  return new Promise((resolve, reject) => setTimeout(() => resolve(fruits[name]), 500));\r\n}\r\n\r\n//Выполняем параллельно\r\nasync function aMakeSmoothie() {\r\n  try {\r\n    console.time('aMakeSmoothie');\r\n    const apple = getFruit('apple');\r\n    const kiwi = getFruit('kiwi');\r\n    const berry = getFruit('strawberry');\r\n\r\n    const fruits = await Promise.all([apple, kiwi, berry]);\r\n    console.log(fruits);\r\n    console.timeEnd('aMakeSmoothie');\r\n\r\n    return fruits;\r\n  } catch (error) {\r\n    console.log('Ошибка');\r\n  }\r\n}\r\n\r\n// //Выполняем последовательно\r\n// async function aMakeSmoothie() {\r\n//   try {\r\n//     console.time('aMakeSmoothie');\r\n//     const apple = await getFruit('apple');\r\n//     const kiwi = await getFruit('kiwi');\r\n//     const berry = await getFruit('strawberry');\r\n\r\n//     // const fruits = await Promise.all([apple, kiwi, berry]);\r\n//     // console.log(fruits);\r\n//     console.timeEnd('aMakeSmoothie');\r\n\r\n//     return fruits;\r\n//   } catch (error) {\r\n//     console.log('Ошибка');\r\n//   }\r\n// }\r\n\r\naMakeSmoothie();\r\n\r\n// async function fn () {}\r\n\r\n// const fn  = async function () {}\r\n\r\n// const arr = async () => {}\r\n\r\n// const x = {\r\n//   async getname () {}\r\n// }\r\n\r\n// class X {\r\n//   async getName () {}\r\n// }\r\n\r\nconst BASE_URL = 'http://localhost:4040';\r\n\r\nasync function addBook(book) {\r\n  const options = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(book),\r\n  };\r\n\r\n  //   const response = await fetch(`${BASE_URL}/books`, options);\r\n  //   const newBook = await response.json();\r\n\r\n  //   return newBook;\r\n  const newBook = await fetch(`${BASE_URL}/books`, options).newBook.response.json();\r\n  return newBook;\r\n}\r\n","// import animeTpl from '../templates/img.hbs';\r\n\r\n// const refs = {\r\n//   cardMarkup: document.querySelector('.gallery'),\r\n// };\r\nfetch('https://api.openbrewerydb.org/breweries')\r\n  .then(response => response.json())\r\n  .then(data => console.log(data));\r\n\r\n// function makeMarkup(data) {\r\n//   refs.cardMarkup.insertAdjacentHTML('beforeend', animeTpl(data));\r\n// }\r\n\r\n// makeMarkup();\r\n","import './sass/main.scss';\r\nimport './js/async-await';\r\nimport './js/axios';\r\n\r\nfunction sum(a, b) {\r\n  return a + b;\r\n}\r\n\r\nconsole.log(sum(1.15, 2.3));\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n  console.log(i);\r\n}\r\n\r\n// async function fn () {}\r\n\r\n// const fn  = async function () {}\r\n\r\n// const arr = async () => {}\r\n\r\n// const x = {\r\n//   async getname () {}\r\n// }\r\n\r\n// class X {\r\n//   async getName () {}\r\n// }\r\n"]}